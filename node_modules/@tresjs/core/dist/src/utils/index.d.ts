import { nodeOps } from '../core/nodeOps';
import { AttachType, LocalState, TresInstance, TresObject, TresPrimitive } from '../types';
import { Material } from 'three';
import { TresContext } from '../composables/useTresContextProvider';
export * from './logger';
export declare function disposeMaterial(material: Material): void;
export declare function disposeObject3D(object: TresObject): void;
export declare function resolve(obj: Record<string, any>, key: string): {
    target: Record<string, any>;
    key: string;
};
export declare function attach(parent: TresInstance, child: TresInstance, type: AttachType): void;
export declare function detach(parent: any, child: TresInstance, type: AttachType): void;
export declare function prepareTresInstance<T extends TresObject>(obj: T, state: Partial<LocalState>, context: TresContext): TresInstance;
export declare function invalidateInstance(instance: TresObject): void;
export declare function setPrimitiveObject(newObject: TresObject, primitive: TresPrimitive, setTarget: (object: TresObject) => void, nodeOpsFns: Pick<ReturnType<typeof nodeOps>, 'patchProp' | 'insert' | 'remove'>, context: TresContext): boolean;
export declare function unboxTresPrimitive<T>(maybePrimitive: T): T | TresInstance;
export declare function doRemoveDetach(node: TresObject, context: TresContext): void;
export declare function doRemoveDeregister(node: TresObject, context: TresContext): void;
