import { TresCamera, TresInstance, TresObject, TresPrimitive } from '../../types';
interface VectorLike {
    set: (...args: any[]) => void;
    constructor?: (...args: any[]) => any;
}
export declare const isVectorLike: (value: unknown) => value is VectorLike;
interface Copyable {
    copy: (...args: any[]) => void;
    constructor?: (...args: any[]) => any;
}
export declare const isCopyable: (value: unknown) => value is Copyable;
interface ClassInstance {
    constructor?: (...args: any[]) => any;
}
export declare const isClassInstance: (object: unknown) => object is ClassInstance;
/**
 * Type guard to check if a value is a TresCamera
 * @param value - The value to check
 * @returns True if the value is a TresCamera instance, false otherwise
 */
export declare const isTresCamera: (value: unknown) => value is TresCamera;
/**
 * Type guard to check if a value is a TresObject
 * @param value - The value to check
 * @returns True if the value is a TresObject (Object3D | BufferGeometry | Material | Fog), false otherwise
 * @example
 * ```ts
 * const value = new THREE.Mesh()
 * if (isTresObject(value)) {
 *   // TypeScript knows value is TresObject here
 *   // You can use common properties and methods shared by all TresObjects
 * }
 * ```
 * @remarks
 * TresObject is a union type that represents the core Three.js objects that can be used in TresJS.
 * This includes Object3D, BufferGeometry, Material, and Fog instances.
 */
export declare const isTresObject: (value: unknown) => value is TresObject;
/**
 * Type guard to check if a value is a TresPrimitive
 * @param value - The value to check
 * @returns True if the value is a TresPrimitive instance, false otherwise
 * @example
 * ```ts
 * const value = { isPrimitive: true }
 * if (isTresPrimitive(value)) {
 *   // TypeScript knows value is TresPrimitive here
 *   // You can use properties and methods specific to TresPrimitives
 * }
 * ```
 * @remarks
 * TresPrimitive is a special type in TresJS that represents primitive objects
 * that can be used directly in the scene without needing to be wrapped in a Three.js object.
 */
export declare const isTresPrimitive: (value: unknown) => value is TresPrimitive;
/**
 * Type guard to check if a value is a TresInstance (has __tres property)
 * @param value - The value to check
 * @returns True if the value is a TresInstance (has __tres property), false otherwise
 * @example
 * ```ts
 * const value = new THREE.Mesh()
 * if (isTresInstance(value)) {
 *   // TypeScript knows value is TresInstance here
 *   // You can safely access value.__tres
 * }
 * ```
 */
export declare const isTresInstance: (value: unknown) => value is TresInstance;
export {};
