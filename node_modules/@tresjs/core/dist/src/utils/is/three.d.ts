import { BufferGeometry, Camera, Color, ColorRepresentation, Fog, Group, Light, Material, Mesh, Object3D, OrthographicCamera, PerspectiveCamera, Scene, Layers } from 'three';
/**
 * Type guard to check if a value is a Three.js Object3D
 * @param value - The value to check
 * @returns True if the value is a Three.js Object3D instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.Object3D()
 * if (isObject3D(value)) {
 *   // TypeScript knows value is Object3D here
 *   value.position // OK
 *   value.rotation // OK
 *   value.scale // OK
 * }
 * ```
 */
export declare const isObject3D: (value: unknown) => value is Object3D<import('three').Object3DEventMap>;
/**
 * Type guard to check if a value is a Three.js Mesh
 * @param value - The value to check
 * @returns True if the value is a Three.js Mesh instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.Mesh()
 * if (isMesh(value)) {
 *   // TypeScript knows value is Mesh here
 *   value.geometry // OK
 */
export declare const isMesh: (value: unknown) => value is Mesh<BufferGeometry<import('three').NormalBufferAttributes, import('three').BufferGeometryEventMap>, Material | Material[], import('three').Object3DEventMap>;
/**
 * Type guard to check if a value is a Three.js Camera
 * @param value - The value to check
 * @returns True if the value is a Three.js Camera instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.PerspectiveCamera()
 * if (isCamera(value)) {
 *   // TypeScript knows value is Camera here
 *   value.fov // OK
 *   value.near // OK
 *   value.far // OK
 * }
 * ```
 */
export declare const isCamera: (value: unknown) => value is Camera;
/**
 * Type guard to check if a value is a Three.js OrthographicCamera
 * @param value - The value to check
 * @returns True if the value is a Three.js OrthographicCamera instance, false otherwise
 */
export declare const isOrthographicCamera: (value: unknown) => value is OrthographicCamera;
/**
 * Type guard to check if a value is a Three.js PerspectiveCamera
 * @param value - The value to check
 * @returns True if the value is a Three.js PerspectiveCamera instance, false otherwise
 */
export declare const isPerspectiveCamera: (value: unknown) => value is PerspectiveCamera;
/**
 * Type guard to check if a value is a Three.js Color
 * @param value - The value to check
 * @returns True if the value is a Three.js Color instance, false otherwise
 */
export declare const isColor: (value: unknown) => value is Color;
/**
 * Type guard to check if a value is a Three.js ColorRepresentation
 * @param value - The value to check
 * @returns True if the value is a Three.js ColorRepresentation instance, false otherwise
 */
export declare const isColorRepresentation: (value: unknown) => value is ColorRepresentation;
/**
 * Type guard to check if a value is a Three.js Layers
 * @param value - The value to check
 * @returns True if the value is a Three.js Layers instance, false otherwise
 */
export declare const isLayers: (value: unknown) => value is Layers;
/**
 * Type guard to check if a value is a Three.js BufferGeometry
 * @param value - The value to check
 * @returns True if the value is a Three.js BufferGeometry instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.BufferGeometry()
 * if (isBufferGeometry(value)) {
 *   // TypeScript knows value is BufferGeometry here
 *   value.attributes // OK
 *   value.index // OK
 *   value.computeVertexNormals() // OK
 * }
 * ```
 */
export declare const isBufferGeometry: (value: unknown) => value is BufferGeometry<import('three').NormalBufferAttributes, import('three').BufferGeometryEventMap>;
/**
 * Type guard to check if a value is a Three.js Material
 * @param value - The value to check
 * @returns True if the value is a Three.js Material instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.MeshStandardMaterial()
 * if (isMaterial(value)) {
 *   // TypeScript knows value is Material here
 *   value.color // OK
 *   value.metalness // OK
 *   value.roughness // OK
 * }
 * ```
 */
export declare const isMaterial: (value: unknown) => value is Material;
/**
 * Type guard to check if a value is a Three.js Light
 * @param value - The value to check
 * @returns True if the value is a Three.js Light instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.DirectionalLight()
 * if (isLight(value)) {
 *   // TypeScript knows value is Light here
 *   value.intensity // OK
 *   value.color // OK
 *   value.position // OK
 * }
 * ```
 */
export declare const isLight: (value: unknown) => value is Light<import('three').LightShadow<Camera> | undefined>;
/**
 * Type guard to check if a value is a Three.js Fog
 * @param value - The value to check
 * @returns True if the value is a Three.js Fog instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.Fog(0x000000, 1, 1000)
 * if (isFog(value)) {
 *   // TypeScript knows value is Fog here
 *   value.color // OK
 *   value.near // OK
 *   value.far // OK
 * }
 * ```
 */
export declare const isFog: (value: unknown) => value is Fog;
/**
 * Type guard to check if a value is a Three.js Scene
 * @param value - The value to check
 * @returns True if the value is a Three.js Scene instance, false otherwise
 * @example
 * ```ts
 * const value = new THREE.Scene()
 * if (isScene(value)) {
 *   // TypeScript knows value is Scene here
 *   value.children // OK
 *   value.add(new THREE.Object3D()) // OK
 *   value.remove(new THREE.Object3D()) // OK
 * }
 * ```
 */
export declare const isScene: (value: unknown) => value is Scene;
/**
 * Type guard to check if a value is a Three.js Group
 * @param value - The value to check
 * @returns True if the value is a Three.js Group instance, false otherwise
 * ```
 */
export declare const isGroup: (value: unknown) => value is Group<import('three').Object3DEventMap>;
