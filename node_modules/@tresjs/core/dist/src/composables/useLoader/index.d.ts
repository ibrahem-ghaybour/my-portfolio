import { UseAsyncStateOptions, UseAsyncStateReturn } from '@vueuse/core';
import { Loader, LoadingManager } from 'three';
import { MaybeRef } from 'vue';
export interface LoaderMethods {
    setDRACOLoader: (dracoLoader: any) => void;
    setMeshoptDecoder: (meshoptDecoder: any) => void;
    setKTX2Loader: (ktx2Loader: any) => void;
}
export type TresLoader<T> = Loader & Partial<LoaderMethods> & {
    load: (url: string, onLoad: (result: T) => void, onProgress?: (event: ProgressEvent<EventTarget>) => void, onError?: (err: unknown) => void) => void;
    loadAsync: (url: string, onProgress?: (event: ProgressEvent) => void) => Promise<T>;
};
export type LoaderProto<T> = new (manager?: LoadingManager) => TresLoader<T>;
export interface TresLoaderOptions<T, Shallow extends boolean> {
    manager?: LoadingManager;
    extensions?: (loader: TresLoader<T>) => void;
    initialValue?: T;
    asyncOptions?: UseAsyncStateOptions<Shallow, any | null>;
}
/**
 * Return type for the useLoader composable
 * @template T - The type of the loaded asset (e.g., GLTF, Texture, etc.)
 * @template Shallow - Whether to use shallow reactivity for better performance
 * @extends {UseAsyncStateReturn<T, [string], Shallow>} - Extends VueUse's useAsyncState return type
 */
export type UseLoaderReturn<T, Shallow extends boolean> = UseAsyncStateReturn<T, [string], Shallow> & {
    /**
     * Loads a new asset from the given path
     * @param path - The URL or path to the asset to load
     */
    load: (path: string) => void;
    /**
     * Progress of the loading process
     * @property loaded - The number of bytes loaded
     * @property total - The total number of bytes to load
     * @property percentage - The percentage of the loading process
     */
    progress: {
        loaded: number;
        total: number;
        percentage: number;
    };
};
/**
 * Vue composable for loading 3D models using Three.js loaders
 * @param Loader - The Three.js loader constructor
 * @param path - The path to the model file
 * @param options - Optional configuration for the loader
 * @returns UseAsyncState composable with the loaded model
 */
export declare function useLoader<T, Shallow extends boolean = false>(Loader: LoaderProto<T>, path: MaybeRef<string>, options?: TresLoaderOptions<T, Shallow>): UseLoaderReturn<T, Shallow>;
