import { LoadingManager } from 'three';
import { LoaderProto } from './index';
import { TresObjectMap } from '../../utils/graph';
declare const _default: <T extends TresObjectMap>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onLoaded?: ((result: T) => any) | undefined;
        readonly onError?: ((error: unknown) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onError" | "onLoaded"> & {
        /**
         * The THREE.js loader to use
         */
        loader: LoaderProto<T>;
        /**
         * Path to resource
         */
        path: string;
        /**
         * Optional THREE.js LoadingManager
         */
        manager?: LoadingManager;
    } & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: {
        default?(_: {
            state: import('vue').UnwrapRef<T>;
            isLoading: boolean;
            error: unknown;
        }): any;
    };
    emit: ((evt: "loaded", result: T) => void) & ((evt: "error", error: unknown) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
