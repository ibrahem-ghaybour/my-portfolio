import { TresContext } from '../useTresContextProvider';
import { ComputedRef, Ref } from 'vue';
import { TresCamera } from '../../types';
/**
 * Interface for the return value of the useCamera composable
 */
export interface UseCameraReturn {
    activeCamera: ComputedRef<TresCamera>;
    /**
     * The list of cameras
     */
    cameras: Ref<TresCamera[]>;
    /**
     * Register a camera
     * @param camera - The camera to register
     * @param active - Whether to set the camera as active
     */
    registerCamera: (camera: TresCamera, active?: boolean) => void;
    /**
     * Deregister a camera
     * @param camera - The camera to deregister
     */
    deregisterCamera: (camera: TresCamera) => void;
    /**
     * Set the active camera
     * @param cameraOrUuid - The camera or its UUID to set as active
     */
    setActiveCamera: (cameraOrUuid: string | TresCamera) => void;
}
/**
 * Interface for the parameters of the useCamera composable
 */
interface UseCameraParams {
    sizes: TresContext['sizes'];
}
/**
 * Composable for managing cameras in a Three.js scene
 * @param params - The parameters for the composable
 * @param params.sizes - The sizes object containing window dimensions
 * @returns The camera management functions and state
 */
export declare const useCameraManager: ({ sizes }: UseCameraParams) => UseCameraReturn;
export {};
