import { ColorRepresentation, ColorSpace, ShadowMapType, ToneMapping, WebGLRenderer } from 'three';
import { TresContext } from '../useTresContextProvider';
import { MaybeRef, Reactive, ShallowRef } from 'vue';
import { Renderer } from 'three/webgpu';
import { SizesType } from '../useSizes';
import { UseCameraReturn } from '../useCamera';
import { TresScene } from '../../types';
/**
 * If set to 'on-demand', the scene will only be rendered when the current frame is invalidated
 * If set to 'manual', the scene will only be rendered when advance() is called
 * If set to 'always', the scene will be rendered every frame
 */
export type RenderMode = 'always' | 'on-demand' | 'manual';
export type RenderFunction = (notifySuccess: () => void) => void;
export type TresRenderer = WebGLRenderer | Renderer;
export interface RendererOptions {
    /**
     * WebGL Context options (Readonly because they are passed to the renderer constructor)
     * They can't be changed after the renderer is created because they are passed to the canvas context
     */
    antialias?: boolean;
    /**
     * Enables stencil buffer with 8 bits.
     * Required for stencil-based operations like shadow volumes or post-processing effects.
     * @readonly
     * @default true
     */
    stencil?: boolean;
    /**
     * Enables depth buffer with at least 16 bits.
     * Required for proper 3D rendering and depth testing.
     * @readonly
     * @default true
     */
    depth?: boolean;
    /**
     * Sets the shader precision of the renderer.
     * @see {@link https://threejs.org/docs/#api/en/renderers/WebGLRenderer}
     * @default 'highp'
     */
    precision?: 'highp' | 'mediump' | 'lowp';
    /**
     * Enables logarithmic depth buffer. Useful for scenes with large differences in scale.
     * Helps prevent z-fighting in scenes with objects very close and very far from the camera.
     * @readonly
     * @default false
     */
    logarithmicDepthBuffer?: boolean;
    /**
     * Preserves the buffers until manually cleared or overwritten.
     * Needed for screenshots or when reading pixels from the canvas.
     * Warning: This may impact performance.
     * @readonly
     * @default false
     */
    preserveDrawingBuffer?: boolean;
    /**
     * Power preference for the renderer.
      * Power preference for the renderer.
      * - `default`: Automatically chooses the most suitable power setting.
      * - `high-performance`: Prioritizes rendering performance.
      * - `low-power`: Tries to reduce power usage.
     * @see {@link https://threejs.org/docs/#api/en/renderers/WebGLRenderer}
     * @default 'default'
     * @readonly
     */
    powerPreference?: WebGLPowerPreference;
    /**
       * Whether to create the WebGL context with an alpha buffer.
       * This is a WebGL context option that must be set during context creation and cannot be changed later.
       * When true, the canvas can be transparent, showing content behind it.
       * @readonly
       * @default false
       */
    alpha?: boolean;
    /**
     * Whether to premultiply the alpha of the canvas.
     * @see {@link https://threejs.org/docs/#api/en/renderers/WebGLRenderer}
     * @default true
     */
    premultipliedAlpha?: boolean;
    /**
     * Whether to fail if the major performance caveat is detected.
     * @see {@link https://threejs.org/docs/#api/en/renderers/WebGLRenderer}
     * @default false
     */
    failIfMajorPerformanceCaveat?: boolean;
    /**
     * WebGL options with set methods
     * @see {@link https://threejs.org/docs/#api/en/renderers/WebGLRenderer}
     */
    /**
     * Clear color for the canvas
     * Can include alpha value (e.g. '#00808000' for fully transparent teal)
     */
    clearColor?: ColorRepresentation;
    /**
     * The opacity of the clear color (0-1)
     * Controls the transparency of the clear color
     * @default 1
     */
    clearAlpha?: number;
    /**
     * Enable shadow rendering in the scene
     * @default false
     */
    shadows?: boolean;
    /**
     * Tone mapping technique to use for the scene
     * - `NoToneMapping`: No tone mapping is applied.
     * - `LinearToneMapping`: Linear tone mapping.
     * - `ReinhardToneMapping`: Reinhard tone mapping.
     * - `CineonToneMapping`: Cineon tone mapping.
     * - `ACESFilmicToneMapping`: ACES Filmic tone mapping.
     * - `AgXToneMapping`: AgX tone mapping.
     * - `NeutralToneMapping`: Neutral tone mapping.
     * @see {@link https://threejs.org/docs/#api/en/constants/Renderer}
     * @default ACESFilmicToneMapping (Opinionated default by TresJS)
     */
    toneMapping?: ToneMapping;
    /**
     * Type of shadow map to use for shadow calculations
     * - `BasicShadowMap`: Basic shadow map.
     * - `PCFShadowMap`: Percentage-Closer Filtering shadow map.
     * - `PCFSoftShadowMap`: Percentage-Closer Filtering soft shadow map.
     * - `VSMShadowMap`: Variance shadow map.
     * @see {@link https://threejs.org/docs/#api/en/constants/Renderer}
     * @default PCFSoftShadowMap (Opinionated default by TresJS)
     */
    shadowMapType?: ShadowMapType;
    /**
     * Whether to use legacy lights system instead of the new one
     * @deprecated Use `useLegacyLights: false` for the new lighting system
     */
    useLegacyLights?: boolean;
    /**
     * Color space for the output render
     * @see {@link https://threejs.org/docs/#api/en/constants/Renderer}
     */
    outputColorSpace?: ColorSpace;
    /**
     * Exposure level of tone mapping
     * @default 1
     */
    toneMappingExposure?: number;
    /**
     * Rendering mode for the canvas
     * - 'always': Renders every frame
     * - 'on-demand': Renders only when changes are detected
     * - 'manual': Renders only when explicitly called
     * @default 'always'
     */
    renderMode?: 'always' | 'on-demand' | 'manual';
    /**
     * Device Pixel Ratio for the renderer
     * Can be a single number or a tuple defining a range [min, max]
     */
    dpr?: number | [number, number];
    /**
     * Custom WebGL renderer instance
     * Allows using a pre-configured renderer instead of creating a new one
     */
    renderer?: (ctx: TresRendererSetupContext) => TresRenderer;
}
export interface TresRendererSetupContext {
    sizes: SizesType;
    scene: ShallowRef<TresScene>;
    camera: UseCameraReturn;
    canvas: MaybeRef<HTMLCanvasElement>;
}
export interface UseRendererOptions {
    scene: ShallowRef<TresScene>;
    canvas: MaybeRef<HTMLCanvasElement>;
    options: Reactive<RendererOptions>;
    contextParts: Pick<TresContext, 'sizes' | 'camera'>;
}
export declare function useRendererManager({ scene, canvas, options, contextParts: { sizes, camera }, }: UseRendererOptions): {
    loop: {
        start: () => void;
        stop: () => void;
        isActive: Readonly<ShallowRef<boolean>>;
        onBeforeLoop: import('@vueuse/core').EventHookOn<import('../useCreateRafLoop').RafLoopContext>;
        onLoop: import('@vueuse/core').EventHookOn<import('../useCreateRafLoop').RafLoopContext>;
    };
    instance: TresRenderer;
    advance: () => void;
    onReady: import('@vueuse/core').EventHookOn<TresRenderer>;
    onRender: import('@vueuse/core').EventHookOn<TresRenderer>;
    invalidate: (amountOfFramesToInvalidate?: number) => void;
    canBeInvalidated: import('vue').ComputedRef<boolean>;
    mode: "always" | "on-demand" | "manual" | undefined;
    replaceRenderFunction: (fn: RenderFunction) => void;
};
export type UseRendererManagerReturn = ReturnType<typeof useRendererManager>;
