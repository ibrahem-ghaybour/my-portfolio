import { Mesh } from 'three';
import { TresObject } from '../types';
import { SceneGraphObject } from './types';
import { TresContext } from '../composables/useTresContextProvider';
/**
 * Creates a node representation of a Three.js object for the inspector tree
 * @param object - The Three.js object to create a node for
 * @returns A SceneGraphObject representing the Three.js object with relevant metadata
 */
export declare const createNode: (object: TresObject) => SceneGraphObject;
/**
 * Creates a context node for the inspector tree
 * @param key - The key identifier for the context node
 * @param uuid - The unique identifier for the context
 * @param parentKey - Optional parent key for nested context nodes
 * @returns A SceneGraphObject representing the context node
 */
export declare function createContextNode(key: string, uuid: string, parentKey?: string): SceneGraphObject;
/**
 * Recursively builds a graph representation of Three.js objects for the inspector
 * @param object - The root Three.js object to build the graph from
 * @param node - The current node in the graph being built
 * @param filter - Optional filter string to filter objects by type or name
 */
export declare function buildGraph(object: TresObject, node: SceneGraphObject, filter?: string): void;
/**
 * Recursively builds a graph representation of context objects for the inspector
 * @param object - The root object to build the context graph from
 * @param node - The current node in the graph being built
 * @param visited - WeakSet to track visited objects and prevent circular references
 * @param depth - Current depth in the object tree
 * @param maxDepth - Maximum depth to traverse
 * @param contextUuid - Optional UUID for the context
 * @param parentKey - Optional parent key for nested objects
 */
export declare function buildContextGraph(object: any, node: SceneGraphObject, visited?: WeakSet<WeakKey>, depth?: number, maxDepth?: number, contextUuid?: string, parentKey?: string): void;
/**
 * Handler for inspector tree updates
 * @param tres - The TresContext instance
 * @returns A function that handles inspector tree payload updates
 */
export declare const inspectorTreeHandler: (tres: TresContext) => (payload: any) => void;
/**
 * Handler for inspector state updates
 * @param tres - The TresContext instance
 * @param options - Options for the handler
 * @param options.highlightMesh - The currently highlighted mesh
 * @param options.prevInstance - The previously selected instance
 * @returns A function that handles inspector state payload updates
 */
export declare const inspectorStateHandler: (tres: TresContext, { highlightMesh, prevInstance }: {
    highlightMesh: Mesh | null;
    prevInstance: TresObject | null;
}) => (payload: any) => void;
/**
 * Handler for inspector state edits
 * @param tres - The TresContext instance
 * @returns A function that handles inspector state edit payload updates
 */
export declare const inspectorEditStateHandler: (tres: TresContext) => (payload: any) => void;
